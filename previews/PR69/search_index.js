var documenterSearchIndex = {"docs":
[{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"PSparseMatrix\nasync_assemble!\nassemble!\nadd_gids!\nmap_parts","category":"page"},{"location":"reference/#PartitionedArrays.PSparseMatrix","page":"API Reference","title":"PartitionedArrays.PSparseMatrix","text":"PSparseMatrix(init, I, J, V, rows::PRange, cols::PRange, args...; ids, kwargs...)\n\nCreate a new PSparseMatrix from the COO-vectors I, J, and V using init as the initialization method (e.g. sparse for constructing SparseMatrixCSCs on every process, or sparsecsr for constructing SparseMatrixCSR on every process). I, J, and V, should all be AbstractPData-wrapped arrays containing the row-IDs, column-IDs, and values, respectively. rows and cols should be PRanges describing the process ownership of the rows and columns. If the IDs (in I, and J) are given in global-enumeration this should be specified by passing ids=:global as a keyword argument (the constructor will then internally renumber to local IDs), and if the IDs are given in process-local enumeration this should be specified by passing ids=:local.\n\nPSparseMatrix(init, I, J, V, rows::Int, cols::Int, args...; kwargs...)\n\nSame as above, but with rows and cols given as integers. This method requires IDs in I, and J to be globally enumerated (and thus passing ids=:global).\n\nPSparseMatrix(I, J, V, args...; kwargs...)\n\nSame as the methods above, except providing sparse as the default initialization method.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedArrays.async_assemble!","page":"API Reference","title":"PartitionedArrays.async_assemble!","text":"async_assemble!(I, J, V, rows::PRange) -> Task\n\nCreate a Task for syncronizing the COO-vectors I, J, and V, i.e. sending the triplet (i, j, v) to the process that owns row i, The row ownership is specified by rows.\n\nThe Task that is returned is not scheduled. To execute the assembly use schedule and wait.\n\nExample\n\nassembly_task = async_assemble!(I, J, V, rows)\nmap_parts(schedule, assembly_task)\n# Could do other work here while the task is finishing\nmap_parts(wait, assembly_task)\n\n\n\n\n\n","category":"function"},{"location":"reference/#PartitionedArrays.assemble!","page":"API Reference","title":"PartitionedArrays.assemble!","text":"assemble!(args...; kwargs...)\n\nBlocking version of async_assemble!.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PartitionedArrays.add_gids!","page":"API Reference","title":"PartitionedArrays.add_gids!","text":"add_gids!(a::PRange, gids::AbstractPData, neighbors_snd=nothing, neighbors_rcv=nothing; kwargs...)\n\nFor each part, associate the global IDs in gids to the PRange a. Ghost IDs are added for the global IDs that are not owned by the corresponding part.\n\nSee also add_gids.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PartitionedArrays.map_parts","page":"API Reference","title":"PartitionedArrays.map_parts","text":"map_parts(f, xs::AbstractPData...) -> AbstractPData\n\nCall function f on the data xs owned by the current process.\n\nInternally this unwraps the arguments xs, calls f with the underlying data, and rewraps the result as AbstractPData of the same type.\n\nExample\n\nIn this example (using the MPIBackend):\n\nA, B, X, and Y are ::MPIData,\na, b, x, and y are ::Vector (the underlying data of the MPIData)\n\nX, Y = map_parts(A, B) do a, b\n    x = a + 2 * b\n    y = a - 5 * b\n    return x, y\nend\n\n\n\n\n\n","category":"function"},{"location":"#PartitionedArrays.jl","page":"Home","title":"PartitionedArrays.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for PartitionedArrays.jl!","category":"page"},{"location":"","page":"Home","title":"Home","text":"This page is under construction and currently only contains reference docstrings for the API. See the repository README for more information.","category":"page"}]
}
